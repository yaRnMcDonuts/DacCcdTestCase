MaterialDef AfflictedLeaves{

    MaterialParameters {

        Boolean UseVertexColorsAsSunIntensity
        Float StaticSunIntensity

        Vector4 ProbeColor

        Boolean BrightenIndoorShadows

        Int AfflictionSplatScale : 8

        Float AfflictionRoughnessValue : 1.0
        Float AfflictionMetallicValue : 0.0
        Float AfflictionEmissiveValue : 0.0 //note that this is simplified into one value, rather than 2 with power and intensity like the regular pbr values.

        Texture2D AfflictionAlphaMap
        Texture2D SplatAlbedoMap 
        Texture2D SplatNormalMap 
        Texture2D SplatRoughnessMetallicMap
        Texture2D SplatEmissiveMap

        Color AfflictionEmissiveColor : 1.0 1.0 1.0 1.0

        Float SplatNoiseVar


        Boolean UseTriplanarAfflictionMapping

        Vector3 TileLocation
        Float TileWidth : 512.0

        // Alpha threshold for fragment discarding
        Float AlphaDiscardThreshold (AlphaTestFallOff) : 0.1

        //metalness of the material
        Float Metallic : 1.0
        //Roughness of the material
        Float Roughness : 1.0
        // Base material color
        Color BaseColor : 1.0 1.0 1.0 1.0
        // The emissive color of the object
        Color Emissive
        // the emissive power
        Float EmissivePower : 3.0
        // the emissive intensity
        Float EmissiveIntensity : 2.0

        // BaseColor map
        Texture2D BaseColorMap

        // Metallic map
        Texture2D MetallicMap -LINEAR

        // Roughness Map
        Texture2D RoughnessMap -LINEAR

        //Metallic and Roughness are packed respectively in the b and g channel of a single map
        Texture2D MetallicRoughnessMap -LINEAR

        // Texture of the emissive parts of the material
        Texture2D EmissiveMap

        // Normal map
        Texture2D NormalMap -LINEAR

        //The type of normal map: -1.0 (DirectX), 1.0 (OpenGl)
        Float NormalType : -1.0

        // For Spec gloss pipeline
        Boolean UseSpecGloss
        Texture2D SpecularMap
        Texture2D GlossinessMap
        Texture2D SpecularGlossinessMap
        Color Specular : 1.0 1.0 1.0 1.0
        Float Glossiness : 1.0

        Vector4 ProbeData

        // Prefiltered Env Map for indirect specular lighting
        TextureCubeMap PrefEnvMap -LINEAR

        // Irradiance map for indirect diffuse lighting
        TextureCubeMap IrradianceMap -LINEAR

        //integrate BRDF map for indirect Lighting
        Texture2D IntegrateBRDF -LINEAR

        // Parallax/height map
        Texture2D ParallaxMap -LINEAR

        //Set to true is parallax map is stored in the alpha channel of the normal map
        Boolean PackedNormalParallax

        //Sets the relief height for parallax mapping
        Float ParallaxHeight : 0.05

        //Set to true to activate Steep Parallax mapping
        Boolean SteepParallax

        // Set to Use Lightmap
        Texture2D LightMap


        Boolean AoPackedInMRMap

        // Set to use TexCoord2 for the lightmap sampling
        Boolean SeparateTexCoord

        //shadows
        Int FilterMode
        Boolean HardwareShadows

        Texture2D ShadowMap0
        Texture2D ShadowMap1
        Texture2D ShadowMap2
        Texture2D ShadowMap3
        //pointLights
        Texture2D ShadowMap4
        Texture2D ShadowMap5

        Float ShadowIntensity
        Vector4 Splits
        Vector2 FadeInfo

        Matrix4 LightViewProjectionMatrix0
        Matrix4 LightViewProjectionMatrix1
        Matrix4 LightViewProjectionMatrix2
        Matrix4 LightViewProjectionMatrix3
        //pointLight
        Matrix4 LightViewProjectionMatrix4
        Matrix4 LightViewProjectionMatrix5
        Vector3 LightPos
        Vector3 LightDir

        Float PCFEdge
        Float ShadowMapSize

        // For hardware skinning
        Int NumberOfBones
        Matrix4Array BoneMatrices

        //For instancing
        Boolean UseInstancing

        //For Vertex Color
        Boolean UseVertexColor

        Boolean BackfaceShadows : false

        // Wind related parameters
        Vector3 WorldNoiseOffset
        Texture2D WindNoise
        Boolean UseWind
        Float FlexHeight : 2.0
        Float TrunkFlexibility : 1.0
        Float BranchFlexibility : 1.0

        // Ground scattering parameters
        Boolean UseScattering       
        Vector3 SunPosition
        Float Exposure        
        Float KmESun
        Float InnerRadius        
        Float RadiusScale
        Float PlanetScale : 1        
        Vector3 InvWavelengthsKrESun        
        Float AverageDensityScale
        Float InvAverageDensityHeight;
        Vector3 KWavelengths4PI;

        Boolean SimArborealLeaves;

        Boolean UseFog
        Color FogColor
        Vector2 LinearFog
        Float ExpFog
        Float ExpSqFog
    }

    Technique {
        LightMode SinglePassAndImageBased

        VertexShader GLSL110 GLSL150:   MatDefs/vert/PBRLeaves.vert
        FragmentShader GLSL110 GLSL150: MatDefs/frag/pbrGrass.frag

        WorldParameters {
            WorldViewProjectionMatrix
            ViewProjectionMatrix
            NormalMatrix
            WorldNormalMatrix
            WorldViewMatrix
            ViewMatrix
            CameraPosition
            WorldMatrix
            Time
        }

        Defines {

            USE_FOG : UseFog
            FOG_LINEAR : LinearFog
            FOG_EXP : ExpFog
            FOG_EXPSQ : ExpSqFog

            AFFLICTIONTEXTURE : AfflictionAlphaMap
            AFFLICTIONALBEDOMAP: SplatAlbedoMap 
            AFFLICTIONNORMALMAP : SplatNormalMap 
            AFFLICTIONROUGHNESSMETALLICMAP : SplatRoughnessMetallicMap
            AFFLICTIONEMISSIVEMAP : SplatEmissiveMap

            USE_SPLAT_NOISE : SplatNoiseVar

            TILEWIDTH : TileWidth
            TILELOCATION : TileLocation

            PROBE_COLOR : ProbeColor

            USE_VERTEX_COLORS_AS_SUN_INTENSITY : UseVertexColorsAsSunIntensity
            STATIC_SUN_INTENSITY : StaticSunIntensity
            BRIGHTEN_INDOOR_SHADOWS : BrightenIndoorShadows

            USE_TRIPLANAR_AFFLICTION_MAPPING : UseTriplanarAfflictionMapping

            SIMARBOREAL_LEAVES : SimArborealLeaves

            BASECOLORMAP : BaseColorMap
            NORMALMAP : NormalMap
            METALLICMAP : MetallicMap
            ROUGHNESSMAP : RoughnessMap
            EMISSIVEMAP : EmissiveMap
            EMISSIVE : Emissive
            SPECGLOSSPIPELINE : UseSpecGloss
            PARALLAXMAP : ParallaxMap
            NORMALMAP_PARALLAX : PackedNormalParallax
            STEEP_PARALLAX : SteepParallax
            LIGHTMAP : LightMap
            SEPARATE_TEXCOORD : SeparateTexCoord
            DISCARD_ALPHA : AlphaDiscardThreshold
            NUM_BONES : NumberOfBones
            INSTANCING : UseInstancing
            USE_PACKED_MR: MetallicRoughnessMap
            USE_PACKED_SG: SpecularGlossinessMap
            SPECULARMAP : SpecularMap
            GLOSSINESSMAP : GlossinessMap
            NORMAL_TYPE: NormalType
            VERTEX_COLOR : UseVertexColor

            
            AO_PACKED_IN_MR_MAP : AoPackedInMRMap

            // Wind related
            USE_WIND : UseWind
        }
    }

    Technique PreShadow {

        VertexShader GLSL100 GLSL150 :   MatDefs/vert/PBRLeaves.vert
        FragmentShader GLSL100 GLSL150 :  MatDefs/frag/PreShadowPBR.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldViewMatrix
            WorldMatrix
            ViewMatrix
            ViewProjectionMatrix
            Time
        }

        Defines {
            DISCARD_ALPHA : AlphaDiscardThreshold
            NUM_BONES : NumberOfBones
            INSTANCING : UseInstancing

            BASECOLORMAP : BaseColorMap

         // Wind related
            USE_WIND : UseWind
            
         // For instancing
            USE_INSTANCING : UseInstancing
        }

        ForcedRenderState {
            FaceCull Off
            DepthTest On
            DepthWrite On
            PolyOffset 5 3
            ColorWrite Off
        }
    }

    Technique PostShadow {
        VertexShader GLSL100 GLSL150:   Common/MatDefs/Shadow/PostShadow.vert
        FragmentShader GLSL100 GLSL150: MatDefs/frag/PreShadowPBR.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldMatrix
            ViewProjectionMatrix
            ViewMatrix
        }

        Defines {
            HARDWARE_SHADOWS : HardwareShadows
            FILTER_MODE : FilterMode
            PCFEDGE : PCFEdge
            DISCARD_ALPHA : AlphaDiscardThreshold
            SHADOWMAP_SIZE : ShadowMapSize
            SHADOWMAP_SIZE : ShadowMapSize
            FADE : FadeInfo
            PSSM : Splits
            POINTLIGHT : LightViewProjectionMatrix5
            NUM_BONES : NumberOfBones
            INSTANCING : UseInstancing
            BACKFACE_SHADOWS: BackfaceShadows
        }

        ForcedRenderState {
            Blend Modulate
            DepthWrite Off
            PolyOffset -0.1 0
        }
    }

    Technique PreNormalPass {

        VertexShader GLSL100 :   Common/MatDefs/SSAO/normal.vert
        FragmentShader GLSL100 : Common/MatDefs/SSAO/normal.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldViewMatrix
            NormalMatrix
            ViewProjectionMatrix
            ViewMatrix
        }

        Defines {
            NUM_BONES : NumberOfBones
            INSTANCING : UseInstancing
        }
    }

    Technique Glow {

        VertexShader GLSL100 GLSL150:   Common/MatDefs/Misc/Unshaded.vert
        FragmentShader GLSL100 GLSL150: Common/MatDefs/Light/Glow.frag

        WorldParameters {
            WorldViewProjectionMatrix
            ViewProjectionMatrix
            ViewMatrix
        }

        Defines {
            NEED_TEXCOORD1
            HAS_GLOWMAP : GlowMap
            HAS_GLOWCOLOR : GlowColor
            NUM_BONES : NumberOfBones
            INSTANCING : UseInstancing
        }
    }
}